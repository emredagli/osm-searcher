{"version":3,"sources":["libs/geoJson.js","libs/colorMap.js","constants.js","redux/reducer-map.js","redux/action-types.js","redux/reducer-search.js","redux/reducer-app.js","redux/reducer.js","redux/actions.js","components/Map.js","containers/MapContainer.js","components/SearchBox.js","components/SearchResultList.js","App.js","index.js","Root.js"],"names":["convertOSMOverpassResultToGeoJSON","searchResult","arguments","length","undefined","elements","geoJSON","features","filter","feature","properties","name","filterNoNamedFeatures","osmToGeoJSON","getCenterOfGeoJSONFeature","turfCenter","geometry","coordinates","sortGeoJSONFeaturesByProperty","property","sort","feature1","feature2","localeCompare","colorHash","ColorHash","getColorMapFromProperty","valueList","reduce","x","y","value","includes","concat","Object","toConsumableArray","getUniqueValueList","colorMap","hex","convertColorMapToColorStops","keys","map","propValue","getHighlightedColorStops","highlightedPropValue","AppStyle","NonHighlightedColor","OverpassSearchUrl","GetOverpassSearchParams","osmKey","bbox","bboxStr","_sw","lat","lng","_ne","replace","AppStates","LOADING","IDLE","initialGeoJSON","overpassApiInitialResultData","InitialState","app","status","zoom","bounds","search","lastSearchedKey","resultColorMap","colorStops","selectedFeature","center","SearchOSMKeys","reducerMap","state","action","type","MapActionTypes","sync","zoomend","moveend","_map$getBounds","getBounds","_map$getBounds$_sw","sw_lat","sw_lng","_map$getBounds$_ne","ne_lat","ne_lng","objectSpread","getZoom","FETCH_SEARCH_RESULTS","CHANGE_APP_STATE","SELECT_FEATURE","reducerSearch","newGeoJSON","data","selectedFeaturePropValue","reducerApp","newState","rootReducer","combineReducers","appReducer","mapReducer","searchReducer","fetchSearchResult","selectedOsmKey","dispatch","changeAppState","url","encodeURI","axios","get","then","response","catch","finally","mapActionCreatorsSynced","mapSyncAction","mapboxgl","accessToken","Map","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mapDefaultSourceId","polygonLayerSuffix","lineLayerSuffix","pointLayerSuffix","mapEl","selectedFeaturePopup","prevProps","updateSource","setPaintPropertiesOfLayers","setMapCenterByFeature","displaySelectedFeatureProperties","hideSelectedFeatureProperties","remove","container","style","comp","on","reduxMapControl","MapboxGLRedux","addControl","MapActionCreators","addSource","addLayersToSource","sourceId","attribution","generateId","source","getSource","setData","addLayer","id","paint","fill-opacity","fill-outline-color","layout","line-join","line-cap","line-opacity","line-width","circle-radius","circle-stroke-width","circle-stroke-color","setPaintPropertiesOfLayer","layerId","paintProperty","setPaintProperty","stops","point","isPointInBounds","LngLat","flyTo","selectedFeatureProps","placeholder","document","createElement","ReactDOM","render","react_default","a","Popup","closeOnClick","className","setLngLat","setDOMContent","addTo","_this2","ref","el","React","Component","connect","bindActionCreators","MapContainer","Panel","Heading","Title","componentClass","toFixed","Body","src_components_Map","SearchBox","onSearchChange","bind","assertThisInitialized","onSearchFormSubmit","event","searchDisabled","setState","target","preventDefault","buttonAttributes","title","onSubmit","FormGroup","InputGroup","Addon","href","rel","FormControl","onChange","key","Button","assign","classNames","disabled","FeatureListItem","_ref","color","selected","clickHandler","active","onClick","SearchResultList","index","selectFeature","selectedFeatureKey","ListGroup","featurePropValue","featureItemProps","featureSelected","mapDispatchToProps","App","loading","Grid","fluid","Row","Col","xs","components_SearchBox","xsHidden","sm","src_components_SearchResultList","src_containers_MapContainer","defaultProps","children","store","initialState","createStore","reducer","applyMiddleware","ReduxThunk","es","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.b10b2b51.chunk.js","sourcesContent":["import osmToGeoJSON from 'osmtogeojson'\r\nimport { center as turfCenter} from '@turf/turf'\r\n\r\nconst filterNoNamedFeatures = (geoJSON = {features:[]}) => {\r\n  geoJSON.features = geoJSON.features.filter(feature => feature.properties.name);\r\n  return geoJSON;\r\n}\r\n\r\nexport const convertOSMOverpassResultToGeoJSON = (searchResult = {elements: []}) => {\r\n  const geoJSONResult = osmToGeoJSON(searchResult);\r\n  return filterNoNamedFeatures(geoJSONResult);\r\n};\r\n\r\nexport const getCenterOfGeoJSONFeature = (feature) => {\r\n  const center = turfCenter(feature);\r\n  return center.geometry.coordinates;\r\n}\r\n\r\nexport const sortGeoJSONFeaturesByProperty = (geoJSON, property) => {\r\n  if (!property) {return;}\r\n  geoJSON.features.sort(\r\n    (feature1, feature2) => (feature1.properties[property] || '').localeCompare(feature2.properties[property] || ''));\r\n}\r\n","import ColorHash from 'color-hash'\r\nimport { AppStyle } from '../constants'\r\n\r\nconst colorHash = new ColorHash();\r\n\r\nconst getUniqueValueList = (geoJSON, property) => {\r\n  return geoJSON.features.reduce((x, y) => {\r\n      const value = y.properties[property];\r\n      return x.includes(value) ? x : [...x, value]\r\n    }, []);\r\n};\r\n\r\nexport const getColorMapFromProperty = (geoJSON, property) => {\r\n  let valueList = getUniqueValueList(geoJSON, property);\r\n\r\n  valueList = valueList.length > 0 ? valueList : [''];\r\n\r\n  return valueList.reduce((colorMap, property) => {\r\n    colorMap[property] = colorHash.hex(property);\r\n    return colorMap;\r\n  }, {});\r\n};\r\n\r\nexport const convertColorMapToColorStops = (colorMap) => {\r\n  return Object.keys(colorMap).map((propValue) => [propValue, colorMap[propValue]]);\r\n};\r\n\r\nexport const getHighlightedColorStops = (colorMap, highlightedPropValue) => {\r\n  return Object.keys(colorMap).map(\r\n    (propValue) => [\r\n      propValue,\r\n      highlightedPropValue === propValue ?\r\n        colorMap[propValue] :\r\n        AppStyle.NonHighlightedColor\r\n    ]\r\n  );\r\n};\r\n","import overpassApiInitialResultData from './assets/data/initial-overpass-api-data'\r\nimport { convertOSMOverpassResultToGeoJSON, sortGeoJSONFeaturesByProperty } from './libs/geoJson'\r\nimport { getColorMapFromProperty, convertColorMapToColorStops } from './libs/colorMap'\r\n\r\n// Taken from Mapbox\r\nconst AccessTokenMapboxGL = 'pk.eyJ1IjoiZW1yZWRhZ2xpIiwiYSI6ImNqMXJ3ZmEzMzAwMHkycXJ6NHBwY3k2bmUifQ.aa0YeG9FVaAV8jSP0m1Vzw';\r\n\r\nconst OverpassAPIUrl = 'https://overpass-api.de/api/interpreter';\r\n\r\nconst OverpassSearchUrl = `${OverpassAPIUrl}?data=`\r\n\r\nconst GetOverpassSearchParams = (osmKey, bbox) => {\r\n  const bboxStr = `${bbox._sw.lat},${bbox._sw.lng},${bbox._ne.lat},${bbox._ne.lng}`\r\n\r\n  // Query format generated from https://overpass-turbo.eu/\r\n  return `\r\n[out:json][timeout:25];\r\n(\r\nnode[\"${osmKey}\"][\"name\"](${bboxStr});\r\nway[\"${osmKey}\"][\"name\"](${bboxStr});\r\nrelation[\"${osmKey}\"][\"name\"](${bboxStr});\r\n);\r\nout;\r\n>;\r\nout skel qt;`.replace(/\\n/gm, '')\r\n}\r\n\r\nconst AppStates = {\r\n  LOADING: 'LOADING',\r\n  IDLE: 'IDLE',\r\n}\r\n\r\nconst initialSearch = 'landuse';\r\nconst initialGeoJSON = convertOSMOverpassResultToGeoJSON(overpassApiInitialResultData);\r\nsortGeoJSONFeaturesByProperty(initialGeoJSON, initialSearch);\r\n\r\nconst colorMap = getColorMapFromProperty(initialGeoJSON, initialSearch)\r\n\r\nconst InitialState = {\r\n  app: {status: AppStates.IDLE},\r\n  map: {zoom: 14, bounds: null},\r\n  search: {\r\n    geoJSON: initialGeoJSON,\r\n    lastSearchedKey: initialSearch,\r\n    resultColorMap: colorMap,\r\n    colorStops: convertColorMapToColorStops(colorMap),\r\n    selectedFeature: null,\r\n  },\r\n  center: [13.3969553, 52.5155642]\r\n}\r\n\r\nconst SearchOSMKeys = [\r\n  'landuse',\r\n  'tourism',\r\n  'amenity',\r\n  'leisure',\r\n  'natural',\r\n  'waterway',\r\n  'power',\r\n  'shop',\r\n  'historic',\r\n  'public_transport'\r\n];\r\n\r\nconst AppStyle = {\r\n  NonHighlightedColor: '#dddddd'\r\n  // TODO: map layer constant paint properties can be defined here.\r\n}\r\n\r\n\r\nexport { AccessTokenMapboxGL, OverpassSearchUrl, OverpassAPIUrl, GetOverpassSearchParams }\r\nexport { InitialState, SearchOSMKeys, AppStates, AppStyle }\r\n","import { MapActionTypes } from '@mapbox/mapbox-gl-redux'\r\nimport { InitialState } from '../constants'\r\n\r\n// For Actions Dispatched from Map\r\nfunction reducerMap(state = InitialState.map, action) {\r\n  const map = action.map;\r\n  switch (action.type) {\r\n    case MapActionTypes.sync:\r\n    case MapActionTypes.zoomend:\r\n    case MapActionTypes.moveend:\r\n      // Since getBounds returns not a plan object following part is needed:\r\n      const {_sw:{lat:sw_lat,lng:sw_lng},_ne:{lat:ne_lat,lng:ne_lng}} = map.getBounds();\r\n      return {\r\n        ...state,\r\n        zoom: map.getZoom(),\r\n        bounds: {_sw:{lat:sw_lat,lng:sw_lng},_ne:{lat:ne_lat,lng:ne_lng}}\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducerMap;\r\n","export const FETCH_SEARCH_RESULTS = 'FETCH_SEARCH_RESULTS'\r\nexport const CHANGE_APP_STATE = 'CHANGE_APP_STATE'\r\nexport const SELECT_FEATURE = 'SELECT_FEATURE'\r\n","import { FETCH_SEARCH_RESULTS, SELECT_FEATURE } from './action-types'\r\nimport { InitialState } from '../constants'\r\nimport { getColorMapFromProperty, convertColorMapToColorStops, getHighlightedColorStops } from '../libs/colorMap'\r\nimport { convertOSMOverpassResultToGeoJSON, sortGeoJSONFeaturesByProperty } from '../libs/geoJson'\r\n\r\n// For Actions Dispatched from Search Box and Search Result List\r\nfunction reducerSearch(state = InitialState.search, action) {\r\n  switch (action.type) {\r\n    case FETCH_SEARCH_RESULTS:\r\n\r\n      const lastSearchedKey = action.lastSearchedKey || null;\r\n      const newGeoJSON = convertOSMOverpassResultToGeoJSON(action.data);\r\n      sortGeoJSONFeaturesByProperty(newGeoJSON, lastSearchedKey);\r\n      const colorMap = getColorMapFromProperty(newGeoJSON, action.lastSearchedKey);\r\n\r\n      return {\r\n        ...state,\r\n        geoJSON: newGeoJSON,\r\n        lastSearchedKey,\r\n        resultColorMap: colorMap,\r\n        selectedFeature: null,\r\n        colorStops: convertColorMapToColorStops(colorMap)\r\n      };\r\n    case SELECT_FEATURE:\r\n      const selectedFeature = state.selectedFeature === action.feature ? null : action.feature;\r\n      const selectedFeaturePropValue = selectedFeature ? selectedFeature.properties[state.lastSearchedKey] : null;\r\n      const colorStops = selectedFeature ?\r\n                            getHighlightedColorStops(state.resultColorMap, selectedFeaturePropValue) :\r\n                            convertColorMapToColorStops(state.resultColorMap);\r\n      return {\r\n        ...state,\r\n        selectedFeature: selectedFeature,\r\n        colorStops: colorStops\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducerSearch;\r\n","import { InitialState } from '../constants'\r\nimport { CHANGE_APP_STATE } from './action-types'\r\n\r\n// For Application Actions like loading\r\nfunction reducerApp(state = InitialState.app, action) {\r\n  switch (action.type) {\r\n    case CHANGE_APP_STATE:\r\n      return {\r\n        ...state,\r\n        status: action.newState\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducerApp;\r\n","import { combineReducers } from \"redux\";\r\nimport mapReducer from \"./reducer-map\";\r\nimport searchReducer from \"./reducer-search\";\r\nimport appReducer from \"./reducer-app\";\r\n\r\nconst rootReducer = combineReducers({\r\n  app: appReducer,\r\n  map: mapReducer,\r\n  search: searchReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n\r\n\r\n","import axios from 'axios'\r\nimport { OverpassSearchUrl, GetOverpassSearchParams, AppStates } from '../constants'\r\nimport { FETCH_SEARCH_RESULTS, CHANGE_APP_STATE, SELECT_FEATURE } from './action-types'\r\n\r\nexport function fetchSearchResult (selectedOsmKey, bbox) {\r\n  return function (dispatch) {\r\n    changeAppState(AppStates.LOADING)(dispatch);\r\n    const url = OverpassSearchUrl + encodeURI(GetOverpassSearchParams(selectedOsmKey, bbox))\r\n    axios.get(url).then((response) => dispatch({\r\n      type: FETCH_SEARCH_RESULTS,\r\n      data: response.data,\r\n      lastSearchedKey: selectedOsmKey\r\n    })).catch((response) => dispatch({\r\n      type: FETCH_SEARCH_RESULTS,\r\n      data: {elements: []},\r\n    })).finally(() => {\r\n      changeAppState(AppStates.IDLE)(dispatch)\r\n    });\r\n  }\r\n}\r\n\r\nexport function mapActionCreatorsSynced (mapSyncAction) {\r\n  return (dispatch) => {\r\n    dispatch(mapSyncAction);\r\n  }\r\n}\r\n\r\nexport function changeAppState (newState) {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: CHANGE_APP_STATE,\r\n      newState: newState,\r\n    })\r\n  }\r\n}\r\n\r\nexport function selectFeature (feature) {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: SELECT_FEATURE,\r\n      feature: feature,\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport mapboxgl from 'mapbox-gl'\r\nimport * as MapboxGLRedux from '@mapbox/mapbox-gl-redux'\r\nimport { connect } from 'react-redux'\r\nimport {AccessTokenMapboxGL} from '../constants'\r\nimport { bindActionCreators } from 'redux'\r\nimport { mapActionCreatorsSynced } from '../redux/actions'\r\nimport { InitialState } from '../constants'\r\nimport { getCenterOfGeoJSONFeature } from '../libs/geoJson'\r\n\r\nimport './Map.scss'\r\n\r\nmapboxgl.accessToken = AccessTokenMapboxGL;\r\n\r\nclass Map extends React.Component {\r\n\r\n  constructor (props) {\r\n    super(props);\r\n    this.mapDefaultSourceId = 'osm-search-source';\r\n    this.polygonLayerSuffix = '-polygon-layer';\r\n    this.lineLayerSuffix = '-line-layer';\r\n    this.pointLayerSuffix = '-point-layer';\r\n    this.map = null;\r\n    this.mapEl = null;\r\n    this.selectedFeaturePopup = null;\r\n  }\r\n\r\n  componentDidUpdate (prevProps) {\r\n    if (prevProps.geoJSON !== this.props.geoJSON) {\r\n      this.updateSource(this.mapDefaultSourceId, this.props.geoJSON);\r\n    }\r\n\r\n    if (prevProps.colorStops !== this.props.colorStops) {\r\n      this.setPaintPropertiesOfLayers()\r\n    }\r\n\r\n    if (this.props.selectedFeature) {\r\n      if (prevProps.selectedFeature !== this.props.selectedFeature) {\r\n        this.setMapCenterByFeature(this.props.selectedFeature);\r\n        this.displaySelectedFeatureProperties();\r\n      }\r\n    } else {\r\n      this.hideSelectedFeatureProperties()\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.map.remove();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.map = new mapboxgl.Map({\r\n      container: this.mapEl,\r\n      style: 'mapbox://styles/mapbox/light-v9',\r\n      center: InitialState.center,\r\n      zoom: InitialState.map.zoom\r\n    });\r\n\r\n    const comp = this\r\n    this.map.on('load', () => {\r\n      const reduxMapControl = new MapboxGLRedux.ReduxMapControl(comp.mapEl);\r\n      comp.map.addControl(reduxMapControl);\r\n      comp.props.mapActionCreatorsSynced(reduxMapControl.MapActionCreators.sync());\r\n\r\n      comp.addSource(comp.mapDefaultSourceId, comp.props.geoJSON)\r\n      comp.addLayersToSource(comp.mapDefaultSourceId)\r\n      comp.setPaintPropertiesOfLayers()\r\n    })\r\n  }\r\n\r\n  addSource (sourceId, geoJSON) {\r\n    this.map.addSource(sourceId, {\r\n      type: 'geojson',\r\n      data: geoJSON,\r\n      attribution: 'Overpass API © OpenStreetMap contributors',\r\n      generateId: true,\r\n    })\r\n  }\r\n\r\n  updateSource (sourceId, geoJSON) {\r\n    if (this.map) {\r\n      const source = this.map.getSource(sourceId);\r\n      if (source) {\r\n        source.setData(geoJSON);\r\n      }\r\n    }\r\n  }\r\n\r\n  addLayersToSource (sourceId) {\r\n    this.map.addLayer({\r\n      id: sourceId + this.polygonLayerSuffix,\r\n      type: 'fill',\r\n      source: sourceId,\r\n      paint: {\r\n        'fill-opacity': 0.6,\r\n        'fill-outline-color': '#000000',\r\n      },\r\n      filter: [\r\n        'match',\r\n        ['geometry-type'],\r\n        ['Polygon', 'MultiPolygon'],\r\n        true,\r\n        false],\r\n    });\r\n\r\n    this.map.addLayer({\r\n      id: sourceId + this.lineLayerSuffix,\r\n      type: 'line',\r\n      source: sourceId,\r\n      layout: {\r\n        'line-join': 'round',\r\n        'line-cap': 'round',\r\n      },\r\n      paint: {\r\n        'line-opacity': 0.7,\r\n        'line-width': 4,\r\n      },\r\n      filter: ['==', '$type', 'LineString'],\r\n    });\r\n\r\n    this.map.addLayer({\r\n      id: sourceId + this.pointLayerSuffix,\r\n      type: 'circle',\r\n      source: sourceId,\r\n      paint: {\r\n        'circle-radius': 4,\r\n        'circle-stroke-width': 1,\r\n        'circle-stroke-color': '#000000',\r\n      },\r\n      filter: ['==', '$type', 'Point'],\r\n    });\r\n\r\n  }\r\n\r\n  setPaintPropertiesOfLayers () {\r\n    this.setPaintPropertiesOfLayer(this.mapDefaultSourceId + this.polygonLayerSuffix, 'fill-color');\r\n    this.setPaintPropertiesOfLayer(this.mapDefaultSourceId + this.lineLayerSuffix, 'line-color');\r\n    this.setPaintPropertiesOfLayer(this.mapDefaultSourceId + this.pointLayerSuffix, 'circle-color');\r\n  }\r\n\r\n  setPaintPropertiesOfLayer (layerId, paintProperty) {\r\n    this.map.setPaintProperty(layerId, paintProperty, {\r\n      type: 'categorical',\r\n      property: this.props.lastSearchedKey,\r\n      stops: this.props.colorStops\r\n    })\r\n  }\r\n\r\n  isPointInBounds(point, bounds) {\r\n    return (\r\n      (bounds._ne.lng > point.lng && bounds._sw.lng < point.lng) &&\r\n      (bounds._ne.lat > point.lat && bounds._sw.lat < point.lat)\r\n    );\r\n  }\r\n\r\n  setMapCenterByFeature (feature) {\r\n    const center = getCenterOfGeoJSONFeature(feature);\r\n    if (!this.isPointInBounds(new mapboxgl.LngLat(center[0], center[1]), this.map.getBounds())) {\r\n      this.map.flyTo({center});\r\n    }\r\n  }\r\n\r\n  displaySelectedFeatureProperties () {\r\n    if (this.selectedFeaturePopup) {\r\n      this.selectedFeaturePopup.remove();\r\n    }\r\n\r\n    const selectedFeatureProps = this.props.selectedFeature.properties;\r\n    const placeholder = document.createElement('div');\r\n    ReactDOM.render(<div>\r\n      <h5>{selectedFeatureProps.name}</h5>\r\n      <p>[{this.props.lastSearchedKey}={selectedFeatureProps[this.props.lastSearchedKey]}] features highlighted</p>\r\n    </div>, placeholder);\r\n\r\n    const feature = this.props.selectedFeature;\r\n    this.selectedFeaturePopup = new mapboxgl.Popup({\r\n        closeOnClick: false,\r\n        className: 'app-map-popup'\r\n      })\r\n      .setLngLat(getCenterOfGeoJSONFeature(feature))\r\n      .setDOMContent(placeholder)\r\n      .addTo(this.map);\r\n  }\r\n\r\n  hideSelectedFeatureProperties () {\r\n    // TODO: check unmountComponentAtNode is required or not.\r\n    if (this.selectedFeaturePopup) {\r\n      this.selectedFeaturePopup.remove();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div ref={el => this.mapEl = el} className=\"absolute top right left bottom\" />\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n  return {\r\n    geoJSON: state.search.geoJSON,\r\n    selectedFeature: state.search.selectedFeature,\r\n    lastSearchedKey: state.search.lastSearchedKey,\r\n    colorStops: state.search.colorStops\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps (dispatch) {\r\n  return bindActionCreators({mapActionCreatorsSynced}, dispatch)\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Map)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Panel } from 'react-bootstrap'\r\nimport Map from '../components/Map'\r\nimport './MapContainer.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass MapContainer extends Component {\r\n  render () {\r\n    return (\r\n      <Panel className='map-container'>\r\n        <Panel.Heading>\r\n          <Panel.Title componentClass=\"h3\"><span>Results on Map</span><span className={'zoom-info'}>Current Zoom: {this.props.zoom.toFixed(1)}</span></Panel.Title>\r\n        </Panel.Heading>\r\n        <Panel.Body className='mapbox-container'>\r\n          <Map/>\r\n        </Panel.Body>\r\n      </Panel>\r\n    )\r\n  }\r\n}\r\n\r\nMapContainer.propTypes = {\r\n  zoom: PropTypes.number.isRequired\r\n}\r\n\r\n\r\nfunction mapStateToProps (state) {\r\n  return {\r\n    zoom: state.map.zoom\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MapContainer)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { fetchSearchResult } from '../redux/actions'\r\nimport { FormGroup, Button, InputGroup, FormControl } from 'react-bootstrap'\r\nimport classNames from 'classnames'\r\nimport { SearchOSMKeys, InitialState } from '../constants'\r\n\r\nclass SearchBox extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.onSearchChange = this.onSearchChange.bind(this)\r\n    this.onSearchFormSubmit = this.onSearchFormSubmit.bind(this)\r\n\r\n    this.state = {\r\n      value: props.value,\r\n    }\r\n  }\r\n\r\n  onSearchChange (event) {\r\n    if (this.props.searchDisabled) {return;}\r\n    this.setState({value: event.target.value})\r\n    this.search(event.target.value);\r\n  }\r\n\r\n  onSearchFormSubmit (event) {\r\n    event.preventDefault();\r\n    this.search(this.state.value);\r\n  }\r\n\r\n  search (selectedOsmKey) {\r\n    if (this.props.searchDisabled) {return;}\r\n    // Fetch Data From Overpass Api\r\n    this.props.fetchSearchResult(selectedOsmKey, this.props.bounds);\r\n  }\r\n\r\n  render () {\r\n    let buttonAttributes = {};\r\n    if (this.props.searchDisabled) {\r\n      buttonAttributes.title = `Please zoom the map in to search. \\nThe zoom level should be greater than ${InitialState.map.zoom}.`;\r\n    }\r\n\r\n    return (\r\n      <form onSubmit={this.onSearchFormSubmit}>\r\n        <FormGroup>\r\n          <InputGroup>\r\n            <InputGroup.Addon>\r\n              <a href=\"https://wiki.openstreetmap.org/wiki/Map_Features\" target=\"_blank\" rel=\"noopener noreferrer\">Please select an OSM [key]:</a>\r\n            </InputGroup.Addon>\r\n            <FormControl componentClass=\"select\" placeholder=\"Please Select an OSM Key\" value={this.state.value} onChange={this.onSearchChange}>\r\n              {SearchOSMKeys.map(key => <option key={key} value={key}>\"{key}\"</option>)}\r\n            </FormControl>\r\n            <InputGroup.Button>\r\n              <Button type=\"submit\" className={classNames('btn-primary', 'search-button', {disabled:this.props.searchDisabled})} {...buttonAttributes}>Search on the map</Button>\r\n            </InputGroup.Button>\r\n          </InputGroup>\r\n        </FormGroup>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n  return {\r\n    bounds: state.map.bounds,\r\n    value: state.search.lastSearchedKey,\r\n    searchDisabled: state.map.zoom < InitialState.map.zoom\r\n  }\r\n}\r\n\r\n\r\nfunction mapDispatchToProps (dispatch) {\r\n  return bindActionCreators({fetchSearchResult}, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBox)\r\n\r\n","import React, { Component } from 'react'\r\nimport { Panel, ListGroup } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport { selectFeature } from '../redux/actions'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport './SearchResultList.scss'\r\n\r\nfunction FeatureListItem ({color, propValue, name, selected, clickHandler}) {\r\n  return (\r\n    <li className={classNames('list-group-item', { active: selected })} onClick={clickHandler}>\r\n      <span style={{color}}>=\"{propValue}</span>\" <span>, {name}</span>\r\n    </li>\r\n  )\r\n}\r\n\r\nclass SearchResultList extends Component {\r\n  featureSelected(index) {\r\n    this.props.selectFeature(this.props.features[index]);\r\n  }\r\n\r\n  render () {\r\n    const selectedFeatureKey = this.props.selectedFeature ? this.props.selectedFeature.id : null;\r\n    return (\r\n      <Panel className='search-result-panel'>\r\n        <Panel.Heading>\r\n          <Panel.Title componentClass=\"h3\">{`${this.props.features.length} feature(s) found for key=\"${this.props.lastSearchedKey}\"`}</Panel.Title>\r\n        </Panel.Heading>\r\n        <ListGroup componentClass=\"ul\">{this.props.features.map(\r\n          (feature, index) => {\r\n            const {properties} = feature;\r\n            const lastSearchedKey = this.props.lastSearchedKey;\r\n            const featurePropValue = properties[lastSearchedKey];\r\n            const featureItemProps = {\r\n              key: index,\r\n              color: this.props.resultColorMap[featurePropValue],\r\n              propValue: properties[lastSearchedKey] || '-',\r\n              name: properties.name,\r\n              selected: feature.id === selectedFeatureKey,\r\n              clickHandler: () => this.featureSelected(index)\r\n            }\r\n            return <FeatureListItem {...featureItemProps} />\r\n          })}\r\n        </ListGroup>\r\n      </Panel>\r\n    )\r\n  }\r\n}\r\n\r\nSearchResultList.propTypes = {\r\n  selectedFeature: PropTypes.object,\r\n  lastSearchedKey: PropTypes.string,\r\n  features: PropTypes.array\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n  const {geoJSON: {features}} = state.search;\r\n  return {\r\n    lastSearchedKey: state.search.lastSearchedKey,\r\n    selectedFeature: state.search.selectedFeature,\r\n    resultColorMap: state.search.resultColorMap,\r\n    features,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {selectFeature};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResultList)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Grid, Row, Col } from 'react-bootstrap'\r\nimport MapContainer from './containers/MapContainer'\r\nimport SearchBox from './components/SearchBox'\r\nimport SearchResultList from './components/SearchResultList'\r\nimport classNames from 'classnames';\r\nimport { AppStates } from './constants'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return (\r\n      <div className={classNames('app', {loading: this.props.status === AppStates.LOADING})}>\r\n        <Grid fluid className=\"app-container\">\r\n          <Row className=\"search-row\">\r\n            <Col xs={12}>\r\n              <SearchBox value={this.props.lastSearchedKey}/>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"search-result-row\">\r\n            <Col xsHidden sm={4} className='search-result-col'>\r\n              <SearchResultList/>\r\n            </Col>\r\n            <Col xs={12} sm={8} className='search-result-col'>\r\n              <MapContainer/>\r\n            </Col>\r\n          </Row>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  status: PropTypes.oneOf(Object.keys(AppStates)).isRequired\r\n}\r\n\r\nApp.defaultProps = {\r\n  status: AppStates.IDLE\r\n};\r\n\r\nfunction mapStateToProps (state) {\r\n  return {\r\n    status: state.app.status,\r\n    lastSearchedKey: state.search.lastSearchedKey\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(App)\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Root from './Root';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <Root>\r\n    <App />\r\n  </Root>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport ReduxThunk from 'redux-thunk'\r\nimport reducer from './redux/reducer';\r\nimport * as MapboxGLRedux from '@mapbox/mapbox-gl-redux'\r\n\r\nexport default ({ children, initialState = {} }) => {\r\n  const store = createStore(reducer, applyMiddleware(ReduxThunk, MapboxGLRedux.mapMiddleware))\r\n\r\n  return <Provider store={store}>{children}</Provider>;\r\n};\r\n"],"sourceRoot":""}